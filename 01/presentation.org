#+TITLE: 第1回
#+Author: Akira Hayashi

#+REVEAL_ROOT: https://revealjs.com/
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: sky
#+REVEAL_TRANS: slide

#+OPTIONS: num:nil toc:1

* DevOpsを学ぶ理由
*** 頑張る木こり
*** 資源評価への要求: ますます高く
**** 資源評価プロジェクトの「成功」とは？
***** 合理的管理
***** ステークホルダーの相互理解
*** なにが必要？
**** きめ細やかな計算シナリオ
**** 徹底的な議論
**** 要求への素早い対応
*** できますか？
*無理です*
**** 理由
計算・提示・議論 のサイクルを増やすには

ワークフローのコストが大きすぎる
*** では，やらないのですか？
それは許されない
*** 悪いニュース
**** さらなる負担増
魚種拡大 +（正気ですか？）+
*** 研究もしたい
**** データ資産が活用されていない
*** つまり
「木こり」を笑っている場合ではない

そろそろ刃を研がないといけない

損益分岐点はとっくに過ぎている
*** どうするべきか？
*** 解決のカギ: DevOps
*** DevOpsって？
ソフトウェア開発のベストプラクティス
*** 大まかな流れ
- 問題を定義する
- 問題を解決する
- 自動品質チェック
- 自動で製品が組み上がる
*** DevOpsを学ぶ理由
- 我々はもう「開発」しているから
- 横着ではなくレシピだから
- 失敗の轍をなぞりつつあるから
- よい副次的効果があるから
** 我々はもう「開発」している
*** あなたは「開発」していますか？
*** あなたはプログラムを書きますか？
*** 名前の定義
*** 私たちはプログラマより「開発」していることもある
*** もう「開発」しているんです
*** 仕事の要件がソフトウェアと同じだから
**** 解決すべき問題があるから
**** データに対して何らかの処理をするから
**** 処理には再現性が求められるから
**** 再現性が求められるから
*** ワーキングスタイルが開発者と同じだから
**** コンピュータを使うから
**** 複数人で作業するから
*** プロジェクト構成要素がソフトウェアと同じだから
**** 顧客: 水産庁，漁業者
**** 製品: 資源評価
***** データ: データ
***** コード: 計算プログラム，作図プログラム，文章
***** テスト: データの仕様，想定される計算結果，誤字脱字
***** ドキュメント: 報告書，プレゼンテーションファイル
**** Issue
***** 顧客からの要求
***** プログラムのバグ
***** 誤字脱字
*** だからベストプラクティス: DevOpsを学びなさい

** 横着ではなくレシピ
*** 自動化と聞いて眉を顰める風潮を感じる
*** 自動化はただの構成要素
*** なぜそう言える？
*** 正しいから
横着: 不正な方法

*** 無駄がないから

*** 過程を楽しむべき仕事ではないから
仕事は旅行ではない
*** 働き方を変えるから
**** あなたは奴隷
**** 仕事の遅い奴隷
**** コンピュータの足を引っ張るな
**** 使い倒せ
** 失敗の轍をなぞりつつある

*** 開発と運用に差が生まれつつある
**** 運用の割合が多すぎるから
**** 開発者文化が入ってこないから
R言語ユーザーは統計学者
**** コンピュータへの翻訳はコツがいるから
***** 直訳ではだめ
***** カーボン紙の例
**** 勉強の習慣がないから
バージョン管理をしていないというのはどれぐらいヤバいのか
*** ファイトスの円盤
*** 引き継がれなかったら意味がない
** よい副次的効果があるから
*** プロジェクトの透明性
着任初日から働き始められる
*** 学習文化
正のサイクル
*** ゆとり

* DevOps

** 構成要素
*** バージョン管理システム

*** チケット管理システム

*** 自動テスト

*** 自動ビルド

*** コミュニケーションツール

**** チャット
**** bot

** クッキーに例えると
*** 手で成形

*** 裏で手で成形

*** カスタマーセンターに登録


** 我々の仕事はどう変わるか

*** 特定の問題について，チャットツールで議論

*** 要求が決定したらIssue登録

*** 責任者を決定

*** ブランチを切る

*** テストを書く

*** コード編集 or 執筆

*** ローカルビルド

*** コミット，push，PR

*** レビュー

*** 修正

*** 再ビルド

*** 再レビュー

*** マージ

*** リモートビルド

*** デリバリー

*** デプロイ

* 議論

* 勉強会のアウトライン確定

** アウトライン
*** DevOpsとは
*** CUI に親しむ

マウスを使わずにコンピュータを操作する利点を理解し，実際にやってみましょう

-   CUI と GUI
-   プレーンテキストとバイナリファイル
-   UNIX コマンド
-   ファイルの本質と拡張子

*** プレーンテキストのちから

業務環境の基礎をプレーンテキストに置くことで，強力なコマンドの恩恵を受けられるようになります

-   diff
-   grep
-   コラム: エンコードと改行コード
-   正規表現
-   コラム: DRY 原則

*** コンテナ技術

環境を正準化するメリットを学び，実際にDockerを使ってみましょう

-   Docker のインストール
-   コンテナ内での作業

*** 文書: 人間のためのテキスト

プレーンテキスト向けの執筆ツールに触れ，その利点と欠点について意見を交換しましょう

-   エディタ
-   アウトライナー
-   pandoc
-   LaTeX

*** コード: コンピュータと人間のためのテキスト

プログラミングが業務に占める割合が増えると，どのような問題が生じ得るかについて議論しましょう．
続いて，それらの問題を解決するためのプログラミングの基礎的な方法論を学びましょう．
プログラミング言語には，R言語を使用します．

- スタイル
    - 命名
    - コメントは必要か
    - インデント
    - リンター
- データ構造
- ディレクトリ構造
- データと2次データ
- 関数化と高階関数
- コラム: YAGNI
- R言語の問題点

*** 開発

ソフトウェア開発の現場で用いられている手法について概観し，我々が学ぶべき本質について議論しましょう．

- テスト駆動開発
- バージョン管理
- チケット管理システム
- 継続的インテグレーション
- コンテナ
- 継続的デプロイ
- アジャイル開発とカスケード開発

*** 業務と研究への応用

我々が業務や研究の現場で課題解決に取り組むとき，満たしているべき要件は何でしょうか．
それらを具体的に解決する方法はあるでしょうか．


**** 業務

-   Issueベースの課題解決
-   責任を負うのは誰か


***** コミュニケーション

円滑なコミュニケーションはプロジェクト成功の要です．
飛び交うコミュニケーションを構成している要素について考え，適切なツールについて議論しましょう．

-   メールの問題点
-   開発者現場で使われるツールとその本質

**** 研究

- バージョン管理
- データベースのブラッシュアップ
- プログラム化とパッケージ化
- DRY原則に基づく文書作成

* インフラ決定
- Slack
- Microsoft Teams
