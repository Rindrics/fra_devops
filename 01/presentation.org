#+TITLE: 第1回
#+SUBTITLE: DevOpsの紹介と議論
#+Author: Akira Hayashi

#+REVEAL_ROOT: https://revealjs.com/
#+REVEAL_HLEVEL: 2
#+REVEAL_THEME: sky
#+REVEAL_TRANS: slide
#+REVEAL_TITLE_SLIDE: <h2>%t</h2><h3>%s</h2><br><br><h4>勉強会: 広く浅く学ぶ情報リテラシー（仮）</h4><h4>%m</h4>

#+OPTIONS: num:nil toc:1 reveal_toc_footer:t
#+MACRO: color @@html:<font color="$1">$2</font>@@

* はじめに
*** 頑張る木こり
:PROPERTIES:
:reveal_background: fig/kikori.jpg
:END:
*** 失敗の轍をたどりつつある
- 開発フェーズは流れに乗ってきた
- {{{color(red,運用とプロジェクト構成)}}}に問題がある
*** なぜか？
我々が「運用」の内容を再定義をできていないから

すぐお隣ではDevOpsが既に解決しているのに...
*** DevOps？
#+BEGIN_QUOTE
DevOps is a cultural movement that changes how individuals think about their work
...
enabling people and teams to practice their crafts in effective and lasting ways.
#+END_QUOTE
(Davis & Daniels 2016, "Effective DevOps")
*** 文化の伝播を阻むもの
- 地理的要因
我々の場合: {{{color(red,言語)}}}
*** R言語
資源研究Cにおけるシェア率No.1

大半のユーザーの用途
- 統計学的計算
- +開発+

*** 私たち研究者
開発者とパラレルワールドに生きている
*** どんな問題が起きるか？
- そもそも問題に気づかない
- それを学ぶ必要性がわからない
- 勉強すべきものがたくさんあるように思える
- ツールに固執する

*** 結果として
運用がいつまでも開発のレベルに追いつかない

プロジェクト全体の生産性は低いまま

*** この勉強会の目的
文化伝播をたすけること
* DevOpsを学ぶ理由
*** 資源評価への要求，ますます高く
**** 本プロジェクトの「成功」とは？
***** 合理的管理
***** ステークホルダーの相互理解
*** なにが必要？
**** きめ細やかな計算シナリオ
**** 徹底的な議論
**** 要求への素早い対応
*** できますか？
*無理です*
**** 理由
計算・提示・議論 のサイクルを増やすには

ワークフローのコストが大きすぎる
*** では，やらないのですか？
それは許されない
*** 悪いニュース
**** さらなる負担増
魚種拡大 +（正気ですか？）+
*** 研究もしたい
**** データ資産が活用されていない
*** つまり
「木こり」を笑っている場合ではない

そろそろ刃を研がないといけない

損益分岐点はとっくに過ぎている
*** どうするべきか？
我々の仕事をあるべき姿に設計しなおす

道標: DevOps
*** 大まかに言うと
*** ただし
file:fig/polygraph.jpg
*** 優れた翻訳
file:fig/ccopy.jpg
*** DevOpsを学ぶ理由
#+ATTR_REVEAL: :frag (appear)
- 我々はもう「開発」しているから
- 横着ではなくレシピだから
- よい副次的効果があるから
** 我々はもう「開発」している
:PROPERTIES:
:reveal_background: fig/large.jpg
:reveal_background_size: 800px
:END:
*** あなたは「開発」していますか？
*** あなたはプログラムを書きますか？
*** 私たちがどこにいるのかを認識しましょう
*** 私たちはプログラマより「開発」していることもある
*** もう「開発」しているんです
- 仕事の要件がソフトウェアと同じだから
- 働き方が開発者と同じだから
- プロジェクト構成がソフトウェアと同じだから
*** 仕事の要件がソフトウェアと同じだから
#+ATTR_REVEAL: :frag (appear)
- 解決すべき問題がある
- データに対して何らかの処理をする
- 処理には再現性が求められる
- 製品公開後も迅速な改善を求められる
*** 仕事のやり方が開発者と同じだから
#+ATTR_REVEAL: :frag (appear)
- コンピュータを使う
- 複数人で作業する
*** プロジェクト構成要素がソフトウェアと同じだから
- 顧客
- 製品
- Issue
*** 顧客？
- 水産庁
- 漁業者
*** 製品？
資源評価
*** 一般的なソフトウェア製品の構成
図を入れる
- データ
- コード
- テスト
- ドキュメント
*** データ？
**** 漁獲量
**** 生物データ
**** パラメータ
**** 文章
*** コード？
**** 計算プログラム
**** 作図プログラム
**** 文書整形プログラム
*** テスト？
**** プログラムの動作
**** 計算結果
**** データの仕様
**** 誤字脱字
**** その他改善案すべて
*** ドキュメント？
**** 報告書
**** プレゼンテーションファイル
*** プロジェクト構成要素がソフトウェアと同じだから
- +顧客+
- +製品+
- Issue
*** Issue？
- プログラムのバグ
- 誤字脱字
- 顧客からの要求
- 取り組むべき課題

*** 以上のように
我々の仕事の本質: ソフトウェア開発者と同じ
- 仕事の要件
- 働き方
- プロジェクト構成要素
** 横着ではなくレシピ
:PROPERTIES:
:reveal_background: fig/cook.jpg
:END:
*** 自動化と聞いて眉を顰める風潮を感じる
- いいから仕事してよ
- 手を抜きたいだけでしょ
- また効率コーリツ言ってる
*** 誤解を解きたい
自動化は（ただの）構成要素

（目標はもっと先にある）

我々にとって自動化は不可欠

*** なぜ自動化する必要がある？
それが正しいから
*** 「正しい」とは
対義語: 正しくない -> 不正
*** 不正の例
マラソンのコースをショートカット
#+ATTR_REVEAL: :frag (appear)
- 正しい経路: 道路に沿った道
- 不正な経路: スタートとゴールを結んだ線
*** それに対して
我々の仕事では
#+ATTR_REVEAL: :frag (appear)
- +正しい+ {{{color(red,不適切な)}}}経路: 道路に沿った道
- +不正な+ {{{color(red,正しい)}}}経路: スタートとゴールを結んだ線

*** なぜ？
仕事は旅行とは違うから

過程を楽しむべきものではない

*** 自動化していない状態とは？
コンピュータからみた我々

*仕事の遅い奴隷*

*** だから
レシピ（= DevOps）に従って，

コンピュータとうまく役割分担しましょう
** よい副次的効果
*** プロジェクトの透明性
着任初日から働き始められる
*** 学習文化
- 教え合い
- 成長速度の加速
*** 引き継がれなかったら意味がない
file:fig/phaitos.jpg
*** 時間と心のゆとり
** まとめ
DevOpsを学ぶ必要性を感じましたか？
* なんとなくDevOpsを知る
** 構成要素
- バージョン管理システム
- チケット管理システム
- 自動テスト
- 自動ビルド
- コミュニケーションツール
  - チャット
  - bot
** ...イメージ，湧きますか？
Any questions?
- 身近なもので例えると？
- 我々の仕事はどう変わる？（[[https://github.com/akikirinrin/gomasaba/issues][資源評価の場合]]）

* 議論
* 勉強会のアウトライン確定
- [[https://akikirinrin.github.io/shell2cd/outline.html][GitHub]]
- [[file:../outline.org][file]]
* インフラ決定
- Slack
- Microsoft Teams
