#+title: 講習会『事務員のためのGitHub』
* GitHubってなに？
- バージョン管理 (Git)
- チケット管理
- レビュー
* もう嫌になりましたか？
** この勉強会の目的
ノンプログラマーがGitHubを自分ごとにするため
** なぜ？
私自身、もっと早く教えて欲しかったと思ったから
** わたしがGit（Hub)を使い始めたきっかけ
達人プログラマー
** 何が変わるか
仕事観が変わった

使ううちに、プログラムを書くかどうかに関係なく、重要であることがわかってきた
** Git(Hub)って誰のもの？
プログラマ？
No!!
電子ファイルを使って仕事をする全就業人口
** 問題点
GitやGitHubに関する巷の情報 -> プログラマ向けなので、事務員から見ると無関係に見えてしまう
** そこでこの勉強会では
文書ファイル使って実演します
* 気を取り直して
** GitHubってなに？
- バージョン管理 (Git)
- チケット管理
- レビュー
** バージョン管理？
https://garoon.cybozu.co.jp/lp/zannen/pdfredirect/gr_zannen_pamph.pdf
** チケット管理？
市販のソフトが強制終了したとき、レポート送信画面を見たことがあるだろう
** レビュー？
投稿論文のレビューと全く同じ
** 画面の見方
先程の3要素をGitHub上の機能名に読み替えて紹介
特に重要なもの3つ
- CodeとBranch
- Issue
- Pull requests
** GitHubを触ってみよう
*** リポジトリトップ
*** Code
- dirに入る
- TOPに戻る
- ファイルを見てみる
バージョン管理されているが、ただのフォルダ
**** バージョンをたどる
一意なコミット
URL指定
**** Branch
並行作業が可能になる
いわば別の顔
ここでもURL一意
*** Issue
もしかしたらおなじみかも？
- 問題特有の議論ができる。
- 誰の仕事かが明確
- 仕事の履歴をあとから辿れる
*** Pull requests
投稿論文のサブミットのようなもの
レビュー履歴が辿れる
- 議論
- 仕事の履歴
- 自動チェック
- 差分
漁海況などの会議、投稿論文のレビュープロセスも全部これになればいいのにと本気で思う
*** さて
いろいろ
* Gitコマンド徹底演習
** 既にあるプロジェクトに加わる時
- リポジトリを手元に持ってくる: git clone
- 状況を見る: git status
- 履歴を見る: git log, git shortlog
- 仕事の登録準備と登録: git add & commit
- 編集する
- git status
- 差分を見る: git diff
- git add & commit
- 仕事を他の人にも見えるところへバックアップ: git push
** めんどくさい？
歯磨きみたいなもの
** こんな時どうするの
- 意図しない変更を元に戻したい: checkout
- バージョン管理したくないファイルを無視する: .gitignoreファイル
- ブランチを作りたい: git checkout -b
- 削除したい: git rm
- 名前を変えたい: git mv
- コミットをなかったことにしたい
  - 公開した後だったので取り消しますと宣言するとき: git revert
  - 公開前だったので手元で直す時: git reset
- 自分の仕事を、特定の仕事の後にやったことにする: git rebase
* GitHubフローを回してみよう
** Issue: 問題の認識
** Assign: 仕事の発生
** 話し合い〜ブランチ作成
** コミット
*** メッセージの書き方
** コミットログをきれいにする
** push
** プルリクエスト
** レビュー依頼
** merge: 承認
** どう仕事をするか
NotificationsのIssue
Assignされていないなら仕事はしなくていい
* 余談
- gitmoji
- git bisect
- git cherry-pick
- git clean
- git grep
- git stash
* 押してはいけないボタンたち
いつまでたっても上達しません
- Top
  - Create new file
  - Uplead files
  - Downlead ZIP
