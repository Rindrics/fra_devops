#+TITLE: 勉強会「広く浅く学ぶ情報リテラシー: 研究業務とソフトウェア開発のアナロジー」

* 目的

** 大目的
- 業務環境の効率化
- 研究活動の活性化

** 本勉強会の目的
コンピュータを適切に使用するために必要な情報を広く浅く提供し，
受講者のさらなる学びのための足がかりとすること

* 発案の動機
- 業務フローについての漠然とした不満が聞こえてくる中，具体的な解決策について議論する場がないから
- 資源評価の手法高度化や対象魚種拡大等の要求により，将来的に業務負担の増加が想定されるから
- 膨大なデータ資産が未活用のまま眠っているから

* 実施内容
- 「継続的デリバリー」の概念紹介
- 重要な技術的要素の紹介と演習
- 問題を収集し，その本質を見極めるための討論

* 提示する考え方
- 我々の業務および研究活動の本質は，ソフトウェア開発と同一である
- 我々が抱える問題は，既にソフトウェア開発の現場では解決されつつある
- 我々の業務および研究環境は，ソフトウェア開発を手本として改善可能である
 
* アウトライン
アウトライン

* はじめに
この勉強会では，





日々の業務および研究の現場で生じる問題を解決する「継続的デリバリー」の概念を理解し，
その構成要素となる個々の技術的知識についても，演習を通じて広く浅く学びます．

** 現状の問題点
私たちが日々従事する委託業務および学術研究（以下，研究業務）において，コンピュータは不可欠な存在です．
本来，コンピュータは我々の仕事を助けてくれるはずのものですが，
その使い方を誤ると，我々は逆にコンピュータに「使われ」，不必要な作業に苦しめられることになります．
コンピュータを使った業務，とくに協同作業は，もはや手作業による帳簿作業の延長ではないのです．

コンピュータの使い方を誤った業務の典型が，現状の資源評価業務です．
現状の諸問題は相互に関係しているため明確な分類は困難ですが，概ね以下の3点に集約されます．

- バイナリファイルへの重度依存
- バージョン管理システムの不在
- 不適切な業務設計

これら3つの問題は，それぞれ以下のような副次的問題を引き起こし，結果的に業務全体の脆弱性につながっています．
- バイナリファイルへの重度依存
  - 手作業の介在
  - 減らない人的ミス
  - 属人化した作業
  - 要求変化への対応の遅れ
- バージョン管理システムの不在
  - 類似ファイルの氾濫
  - 追跡不能な作業
  - 担当者間での重複したタスク
- 不適切な業務設計
  - データベースの欠如
  - 中間ファイルへの依存と手戻り発生リスク

これらの問題は，





業務担当者を精神的に消耗させ，彼ら




が抱える他の業務や研究活動にも悪影響を及ぼします．
今後，資源評価の手法高度化や対象魚種拡大が始まることを考えれば，業務体制の合理化が急務です．
果たして，解決策はあるのでしょうか．

** 本勉強会の目的
その具体的な解決策を提示するのが，本勉強会の目的の一つです．
しかし，その解決策を真に理解するには，問題をこれまで見てきたよりも一歩引いた視点から捉える必要があります．
私たちの研究業務は，以下のような本質的特性を持っています．
- 解決すべき問題がある
- データに対して，何らかの処理をする
- 再現性が要求される
- 追跡可能性が要求される

こういった特性を持つ作業を，私たちはコンピュータを使って，複数人で共同で行うのです．

コンピュータを使った協同作業に長けているのはソフトウェア開発者たちです．
視野を広げてみれば，研究業務とソフトウェア開発は本質的にまったく同一であるため，
私たちは，研究業務の効率化のヒントを彼らの仕事ぶりに求めることができます．
ソフトウェア開発者たちは20年以上前から，生産的な協同作業に最適な手法についての思考錯誤を繰り返しており，
その手法は近年，「継続的デリバリー」という形で収束しつつあります．


継続的デリバリーは，コンピュータでの協同作業に従事する全ての人が学ぶべき概念ですが，
私たち研究者を含めた外部のコミュニティには，ほとんど認知されていないように思います．
この勉強会では，円滑なチームワークを実現するための手法「継続的デリバリー」を学ぶことによって，
コンピュータと我々がどのように業務を分担すべきかを見極める眼を養います．
継続的デリバリーを構成する個々の要素は組み合わせてこそ真価を発揮しますが，個別に導入した場合にも，少しずつ効果を発揮します．
それこそが，コンピュータに「使われる」働き方から，コンピュータを「使い倒す」働き方へシフトするための小さなステップです．
本勉強会では，これらの技術についても広く浅く解説し，演習を通じて実際に体験することができます．

たとえ継続的デリバリーそのものを取り入れることが難しかったとしても，
この生産的なワークフローの極致を「知っておく」だけで，身の回りの業務の改善点が見えるようになります．
本勉強会で紹介されるさまざまな技術を即座に身につけるための特効薬はありませんが，
個々の技術間の有機的つながりを一気に学ぶことができれば，のちの独習の効率は飛躍的に向上するはずです．

* 勉強会の目的と進め方
** メール
コンピュータの適切な使用方法を学ぶための勉強会を開催しようと考えています．

*** 進め方
現時点では，別紙のようなアウトラインを想定しているが，
このまま実施すると，ニーズとの食い違いが生じる恐れがある．
**** そのため，第1回は方向性を決定するためのブレストとしたい
***** ブレスト手法
****** どのような考えがあるかを共有
****** どんなニーズがあるか
***** 主催者は，特定の立場に立たずに，議論のとりまとめだけを行うこととする．
****** 反論しない
***** アウトラインをたたく
***** アウトラインは変更になるかもしれない
***** 興味のある人，特にコンピュータに苦手意識のある方の参加を歓迎します．
**** スケジュール
1回1時間程度，全15回程度を想定していますが，
アウトラインの変更次第では，増減する可能性があります．
長さや頻度についても話し合いたい
**** 第一回はいつを予定している
よろしく
* CUI に親しむ
マウスを使わずにコンピュータを操作する利点を理解し，実際にやってみましょう
- CUI と GUI
- プレーンテキストとバイナリファイル
- UNIX コマンド
- ファイルの本質と拡張子
* プレーンテキストのちから
業務環境の基礎をプレーンテキストに置くことで，強力なコマンドの恩恵を受けられるようになります
- diff
- grep
- コラム: エンコードと改行コード
- 正規表現
- コラム: DRY 原則
* コンテナ技術
環境を正準化するメリットを学び，実際にDockerを使ってみましょう
- Docker のインストール
- コンテナ内での作業
* 文書: 人間のためのテキスト
プレーンテキスト向けの執筆ツールに触れ，その利点と欠点について意見を交換しましょう
- エディタ
- アウトライナー
- pandoc
- LaTeX
* コード: コンピュータと人間のためのテキスト
プログラミングが業務に占める割合が増えると，どのような問題が生じ得るかについて議論しましょう．
続いて，それらの問題を解決するためのプログラミングの基礎的な方法論を学びましょう．
プログラミング言語には，R言語を使用します．
- スタイル
  - 命名
  - コメントは必要か
  - インデント
  - リンター
- データ構造
- ディレクトリ構造
- データと2次データ
- 関数化と高階関数
- コラム: YAGNI
- R言語の問題点
* 開発
ソフトウェア開発の現場で用いられている手法について概観し，我々が学ぶべき本質について議論しましょう．
- テスト駆動開発
- バージョン管理
- チケット管理システム
- 継続的インテグレーション
- コンテナ
- 継続的デプロイ
- アジャイル開発とカスケード開発
* 業務と研究への応用
我々が業務や研究の現場で課題解決に取り組むとき，満たしているべき要件は何でしょうか．
それらを具体的に解決する方法はあるでしょうか．
** 業務
- Issueベースの課題解決
- 責任を負うのは誰か
*** コミュニケーション
円滑なコミュニケーションはプロジェクト成功の要です．
飛び交うコミュニケーションを構成している要素について考え，適切なツールについて議論しましょう．
- メールの問題点
- 開発者現場で使われるツールとその本質
** 研究
- バージョン管理
- データベースのブラッシュアップ
- プログラム化とパッケージ化
- DRY原則に基づく文書作成
* 現状の業務環境の問題点
本勉強会に参加してくださった皆様は，多くの業務を抱えていることと思います（私もそうです）．
メールボックスに押し寄せるタスクに，うんざりしている方もいらっしゃるでしょう．

大量のタスクに対する同僚の不満の声は何度も聞いてきましたし，
私自身も，不満を漏らしたことは何度もあります．
しかし私は，このような現状に不満を感じている方の中でも，
タスク削減のための具体的な解決策を持っている方の割合は，あまり多くないことに気づきました．

大まかにいえば，大量のタスクが降ってくる原因は，そのタスクを生んだ親，
つまり，より上流の仕事が適切な形でなされていないことにあります．
質の悲劇は，量の悲劇をも招き得るのです．


しかし，そのような状況を生み出しているのは，
- どのように仕事を整理すればよいのかわからない
- 仕事の質の悪さに気づいていない
こと．


コンピュータが普及する以前，仕事が実在する「モノ」を対象になされていた時代には，
仕事の質の良し悪しは，誰の目にも明らかでした．

このような問題が生じた要因の一つに，コンピュータの普及があります．
1960年代頃，コンピュータを使っていたのは，その扱いに精通した専門家に限られていました．
マシンのスペックも低かったため，無駄の無いデータ構造が必要とされた．
コンピュータが普及するようになったのは，Office の発売
Officeが画期的だったのは，すぐに使い始められるところ．
その分，電子データの扱いを勉強しなくても，仕事ができるようになってしまった．
いわば，城を作ることができたのは，経験を積んだ大工だけだったのが，誰でも紙とセロハンテープで可能になってしまった．

上での電子データを用いた作業では複製が普及し，
，複製が容易な電子データで仕事がをするようになっ
や複数人での仕事仕事の対象が実際の物体 に対して仕事
コンピュータ時代ならではの問題ですが，
- 本当はすでに材料が揃っていることに気づいていない
** プログラム化で解決
** コンピュータがある現代ならでは
** 現代人のコンピュータ普及の弊害
** 本勉強会
あまり新しい技術は使わない．基礎体力を養う
** 次の問題
- 何から学べばいいかわからない
- 他人が書いたコードがわからない
- 動くかどうかわからない
