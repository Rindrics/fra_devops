#+TITLE: 勉強会「広く浅く学ぶ情報リテラシー」

* 勉強会の目的
コンピュータに仕事を任せるために必要な情報を広く浅く提供し，
受講者のさらなる学びのための足がかりとすること．
* はじめに
私たちの日々の業務において，コンピュータは不可欠なものです．
本来，コンピュータは我々の仕事を助けてくれるはずのものですが，
その使い方を誤ると，我々は逆にコンピュータに「使われ」，不必要な作業に苦しめられることになります．
特に，プロジェクトがトップダウン型の業務隊形をとっている場合，
不適切な業務命令はプロジェクトの生産性を大きく損ないます．
コンピュータを使った業務，とくに協同作業は，もはや手作業による帳簿作業の延長ではないのです．

コンピュータを使った協同作業に長けているのはソフトウェア開発者たちです．
彼らは20年以上前から生産的な協同作業に最適な手法を模索しつづけており，
その手法は近年，「継続的デリバリー」という形で収束しつつあります．
継続的デリバリーの考え方は，コンピュータでの協同作業を必要とする全ての人が学ぶべき概念ですが，
我々研究者を含め，外部のコミュニティには，ほとんど認知されていないように思います．
この勉強会では，円滑なチームワークを実現するための手法「継続的デリバリー」を学ぶことによって，
コンピュータと我々がどのように業務を分担すべきかを見極める眼を養います．
また，コンピュータに「使われる」働き方から，コンピュータを「使い倒す」働き方へシフトするために必要な情報も，
広く浅く提供します．

たとえ継続的デリバリーそのものを取り入れることが難しかったとしても，
この生産的なワークフローの極致を「知っておく」だけで，身の回りの業務の改善点が見えるようになります．
本勉強会で紹介されるさまざまな技術を即座に身につけるための特効薬はありませんが，
個々の技術間のつながりを一気に学ぶことができれば，のちの独習の効率は飛躍的に向上するはずです．

勉強会は，1回1時間程度，全10回程度を想定しています．

** 誰のためか
- コンピュータが嫌いな人
- 雑用を早く終わらせて脳を休ませたい人
- 不必要な雑用はそもそもなければいいのにと思う人

** 誰のためでないか
- 既に継続的デリバリーを導入している人
- 単純作業を繰り返すのが好きな人
- ふってきた業務だけこなしていれば満足な人
- 切れない包丁で料理し続けるのが平気な人
* 現状の業務環境の問題点
本勉強会に参加してくださった皆様は，多くの業務を抱えていることと思います（私もそうです）．

どうしてこんなにたくさんの（お世辞にも楽しいとはいえない）タスクが降ってくるのか，
あなたは考えてみたことがあるでしょうか？
それは，そのタスクを生んだ親，つまり，より上流の仕事が適切な形でなされていないためです．
質の悲劇は，量の悲劇をも招き得るのです．
しかし，そのような状況を生み出しているのは，
- どのように仕事を整理すればよいのかわからない
- 仕事の質の悪さに気づいていない
こと．


コンピュータが普及する以前，仕事が実在する「モノ」を対象になされていた時代には，
仕事の質の良し悪しは，誰の目にも明らかでした．

このような問題が生じた要因の一つに，コンピュータの普及があります．
1960年代頃，コンピュータを使っていたのは，その扱いに精通した専門家に限られていました．
マシンのスペックも低かったため，無駄の無いデータ構造が必要とされた．
コンピュータが普及するようになったのは，Office の発売
Officeが画期的だったのは，すぐに使い始められるところ．
その分，電子データの扱いを勉強しなくても，仕事ができるようになってしまった．
いわば，城を作ることができたのは，経験を積んだ大工だけだったのが，誰でも紙とセロハンテープで可能になってしまった．

上での電子データを用いた作業では複製が普及し，
，複製が容易な電子データで仕事がをするようになっ
や複数人での仕事仕事の対象が実際の物体 に対して仕事
コンピュータ時代ならではの問題ですが，
- 本当はすでに材料が揃っていることに気づいていない
** プログラム化で解決
** コンピュータがある現代ならでは
** 現代人のコンピュータ普及の弊害
** 本勉強会
あまり新しい技術は使わない．基礎体力を養う
** 次の問題
- 何から学べばいいかわからない
- 他人が書いたコードがわからない
- 動くかどうかわからない
* CUI に親しむ
** CUI と GUI
** プレーンテキストとバイナリファイル
** UNIX コマンド 
** ファイルの本質と拡張子
* プレーンテキストのちから
** エンコードと改行コード
** diff
** grep
** 正規表現
** コラム: DRY 原則
* 文書: 人間のためのテキスト
** エディタ
** アウトライナー
** pandoc
** LaTeX
* コード: コンピュータと人間のためのテキスト
** コンパイル言語とインタプリタ言語
** オブジェクト指向言語と関数型言語
** リーダブルコード
*** 命名
*** コメントの必要性
*** インデント
*** リンター
** データ構造
** ディレクトリ構造
** 関数化と高階関数
** コラム: YAGNI
* 開発
** TDD
** Git と GitHub
** 継続的インテグレーション
** コンテナ
** 継続的デプロイ
** アジャイル開発とカスケード開発
** データベースと2次データ
* 雑用と研究への応用
** 雑用
*** WordとExcelのアンインストール
*** 業務要件の見極めとデータ構造
** 研究
*** バージョン管理
*** データベースのブラッシュアップ
*** プログラム化とパッケージ化
*** 本当のデータはどれ？！
*** DRY原則に基づく文書作成
*** 文書ビルド環境の正準化

